#!/usr/bin/env node

// scripts/post-install.js
// Post-installation setup pro GDPR template

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// ANSI colors pro console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

const log = {
  info: (msg) => console.log(`${colors.blue}‚Ñπ${colors.reset} ${msg}`),
  success: (msg) => console.log(`${colors.green}‚úÖ${colors.reset} ${msg}`),
  warn: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è${colors.reset} ${msg}`),
  error: (msg) => console.log(`${colors.red}‚ùå${colors.reset} ${msg}`),
  header: (msg) => console.log(`\n${colors.bright}${colors.cyan}üõ°Ô∏è ${msg}${colors.reset}\n`),
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const question = (prompt) => {
  return new Promise((resolve) => {
    rl.question(`${colors.yellow}?${colors.reset} ${prompt}: `, resolve);
  });
};

// Template pro .env.local
const envTemplate = (config) => `# GDPR Configuration - Generated by post-install script
# Last updated: ${new Date().toISOString()}

# SITE CONFIGURATION
NEXT_PUBLIC_SITE_URL=${config.siteUrl || 'https://example.com'}
NEXT_PUBLIC_SITE_NAME="${config.siteName || 'Your Site Name'}"

# ANALYTICS SERVICES
NEXT_PUBLIC_GA_ID=${config.gaId || '# G-XXXXXXXXXX'}
NEXT_PUBLIC_GTM_ID=${config.gtmId || '# GTM-XXXXXXX'}
NEXT_PUBLIC_FB_PIXEL_ID=${config.fbPixelId || '# 123456789'}
NEXT_PUBLIC_HOTJAR_ID=${config.hotjarId || '# 123456'}

# GDPR API KEYS (Generate secure random keys!)
GDPR_ENCRYPTION_KEY=${generateSecureKey()}
GDPR_JWT_SECRET=${generateSecureKey()}

# EMAIL SERVICE (for GDPR notifications)
BREVO_API_KEY=${config.brevoApiKey || '# your-brevo-api-key'}
SMTP_HOST=${config.smtpHost || 'smtp.brevo.com'}
SMTP_PORT=${config.smtpPort || '587'}
SMTP_USER=${config.smtpUser || '# your-email@domain.com'}
SMTP_PASS=${config.smtpPass || '# your-smtp-password'}

# DATABASE (optional - for storing consent records)
DATABASE_URL=${config.databaseUrl || '# postgresql://user:password@localhost:5432/gdpr_db'}
REDIS_URL=${config.redisUrl || '# redis://localhost:6379'}

# LEGAL CONTACT INFORMATION
GDPR_CONTROLLER_NAME="${config.controllerName || 'Your Name'}"
GDPR_CONTROLLER_EMAIL=${config.controllerEmail || 'gdpr@yourdomain.com'}
GDPR_CONTROLLER_PHONE="${config.controllerPhone || '+420 xxx xxx xxx'}"
GDPR_CONTROLLER_ADDRESS="${config.controllerAddress || 'Your Address'}"
GDPR_CONTROLLER_ICO="${config.controllerIco || 'Your IƒåO'}"

# DEVELOPMENT SETTINGS
NODE_ENV=development
NEXT_PUBLIC_DEBUG_GDPR=${config.debug || 'false'}
`;

// Generov√°n√≠ bezpeƒçn√©ho kl√≠ƒçe
function generateSecureKey(length = 32) {
  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += charset.charAt(Math.floor(Math.random() * charset.length));
  }
  return result;
}

// Kontrola existence soubor≈Ø
function checkFileExists(filePath) {
  return fs.existsSync(path.resolve(filePath));
}

// Vytvo≈ôen√≠ .env.local souboru
async function createEnvFile(config) {
  const envPath = '.env.local';
  
  if (checkFileExists(envPath)) {
    const overwrite = await question(`Soubor ${envPath} ji≈æ existuje. P≈ôepsat? (y/N)`);
    if (overwrite.toLowerCase() !== 'y') {
      log.info('P≈ôeskakuji vytvo≈ôen√≠ .env.local souboru');
      return;
    }
  }

  try {
    fs.writeFileSync(envPath, envTemplate(config));
    log.success(`Vytvo≈ôen soubor ${envPath}`);
  } catch (error) {
    log.error(`Chyba p≈ôi vytv√°≈ôen√≠ ${envPath}: ${error.message}`);
  }
}

// Vytvo≈ôen√≠ z√°kladn√≠ch API endpoints
function createApiEndpoints() {
  const apiDir = 'pages/api/gdpr';
  
  if (!fs.existsSync(apiDir)) {
    fs.mkdirSync(apiDir, { recursive: true });
    log.success(`Vytvo≈ôen adres√°≈ô ${apiDir}`);
  }

  // Vytvo≈ôen√≠ basic API files pokud neexistuj√≠
  const apiFiles = [
    {
      name: 'export.js',
      content: `// GDPR Export API - Generated by template
// TODO: Implementujte podle va≈°ich pot≈ôeb
export default function handler(req, res) {
  res.status(501).json({ error: 'Not implemented yet' });
}
`
    },
    {
      name: 'delete-request.js', 
      content: `// GDPR Delete Request API - Generated by template
// TODO: Implementujte podle va≈°ich pot≈ôeb
export default function handler(req, res) {
  res.status(501).json({ error: 'Not implemented yet' });
}
`
    }
  ];

  apiFiles.forEach(file => {
    const filePath = path.join(apiDir, file.name);
    if (!checkFileExists(filePath)) {
      fs.writeFileSync(filePath, file.content);
      log.success(`Vytvo≈ôen API endpoint: ${filePath}`);
    }
  });
}

// Vytvo≈ôen√≠ example page
function createExamplePage() {
  const pagesDir = 'pages';
  const appDir = 'app';
  
  let targetDir;
  let fileName;
  let content;

  // Detekuj jestli pou≈æ√≠v√° Pages Router nebo App Router
  if (fs.existsSync(appDir)) {
    targetDir = appDir;
    fileName = 'gdpr-demo/page.js';
    content = `// GDPR Demo Page - App Router
import { CookieConsent, GDPRSettings } from '../components/gdpr';

export const metadata = {
  title: 'GDPR Demo | Your Site',
  description: 'Demonstration of GDPR components'
};

export default function GDPRDemoPage() {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-8">GDPR Demo</h1>
      <GDPRSettings />
      <CookieConsent />
    </div>
  );
}
`;
  } else {
    targetDir = pagesDir;
    fileName = 'gdpr-demo.js';
    content = `// GDPR Demo Page - Pages Router
import { CookieConsent, GDPRSettings } from '../components/gdpr';
import Head from 'next/head';

export default function GDPRDemoPage() {
  return (
    <>
      <Head>
        <title>GDPR Demo | Your Site</title>
        <meta name="description" content="Demonstration of GDPR components" />
      </Head>
      <div className="container mx-auto py-8">
        <h1 className="text-3xl font-bold mb-8">GDPR Demo</h1>
        <GDPRSettings />
        <CookieConsent />
      </div>
    </>
  );
}
`;
  }

  const fullPath = path.join(targetDir, fileName);
  const dir = path.dirname(fullPath);
  
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }

  if (!checkFileExists(fullPath)) {
    fs.writeFileSync(fullPath, content);
    log.success(`Vytvo≈ôena demo str√°nka: ${fullPath}`);
  }
}

// Hlavn√≠ setup funkce
async function runSetup() {
  log.header('GDPR Template Setup');
  
  console.log('V√≠tejte! Tento script v√°m pom≈Ø≈æe nakonfigurovat GDPR template.\n');

  const config = {};

  // Z√°kladn√≠ konfigurace
  log.info('Z√°kladn√≠ konfigurace:');
  config.siteName = await question('N√°zev va≈°eho webu');
  config.siteUrl = await question('URL va≈°eho webu (https://example.com)');
  
  // Analytick√© slu≈æby
  log.info('\nAnalytick√© slu≈æby (m≈Ø≈æete p≈ôeskoƒçit stiskem Enter):');
  config.gaId = await question('Google Analytics ID (G-XXXXXXXXXX)');
  config.fbPixelId = await question('Facebook Pixel ID');
  config.hotjarId = await question('Hotjar ID');

  // GDPR kontakt
  log.info('\nGDPR kontaktn√≠ informace:');
  config.controllerName = await question('Jm√©no spr√°vce osobn√≠ch √∫daj≈Ø');
  config.controllerEmail = await question('Email pro GDPR dotazy');
  config.controllerPhone = await question('Telefon (+420 xxx xxx xxx)');
  config.controllerAddress = await question('Adresa spr√°vce');
  config.controllerIco = await question('IƒåO (pokud m√°te)');

  // Email konfigurace
  const setupEmail = await question('\nChcete nakonfigurovat email pro GDPR notifikace? (y/N)');
  if (setupEmail.toLowerCase() === 'y') {
    config.brevoApiKey = await question('Brevo API kl√≠ƒç');
    config.smtpUser = await question('SMTP email');
    config.smtpPass = await question('SMTP heslo');
  }

  // Vytvo≈ôen√≠ soubor≈Ø
  log.info('\nVytv√°≈ô√≠m konfiguraƒçn√≠ soubory...');
  
  await createEnvFile(config);
  createApiEndpoints();
  createExamplePage();

  // Z√°vƒõreƒçn√© informace
  log.header('Setup dokonƒçen!');
  
  console.log('üìã Co dƒõlat d√°le:\n');
  console.log('1. Upravte .env.local podle va≈°ich pot≈ôeb');
  console.log('2. Implementujte API endpointy v pages/api/gdpr/');
  console.log('3. P≈ôidejte <CookieConsent /> do va≈°eho layout');
  console.log('4. Otestujte funkcionalitu na /gdpr-demo');
  console.log('5. P≈ôeƒçtƒõte si dokumentaci v docs/ slo≈æce');
  
  console.log('\nüìö U≈æiteƒçn√© odkazy:');
  console.log('- Dokumentace: https://github.com/webnamiru/nextjs-gdpr-template');
  console.log('- Issue tracker: https://github.com/webnamiru/nextjs-gdpr-template/issues');
  console.log('- Podpora: tech-podpora@webnamiru.site');

  console.log('\nüîß Dal≈°√≠ kroky:');
  console.log('- npm run dev (spustit development server)');
  console.log('- npm run test (spustit testy)');
  console.log('- npm run test:compliance (GDPR audit)');

  log.success('Dƒõkujeme za pou≈æit√≠ GDPR Template! üõ°Ô∏è');
}

// Spu≈°tƒõn√≠ setup pouze pokud nen√≠ CI prost≈ôed√≠
if (!process.env.CI && !process.env.SKIP_POSTINSTALL) {
  runSetup()
    .catch((error) => {
      log.error(`Setup failed: ${error.message}`);
      process.exit(1);
    })
    .finally(() => {
      rl.close();
    });
} else {
  log.info('P≈ôeskakuji interaktivn√≠ setup (CI prost≈ôed√≠)');
  
  // V CI vytvo≈ô jen z√°kladn√≠ soubory
  createApiEndpoints();
  createExamplePage();
  
  log.success('Z√°kladn√≠ struktura vytvo≈ôena');
}